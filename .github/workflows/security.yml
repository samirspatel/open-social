name: Security Checks

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security checks weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    name: Dependency Vulnerability Scan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run npm audit fix
        run: npm audit fix --force
        continue-on-error: true

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript", "typescript"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  secret-scan:
    runs-on: ubuntu-latest
    name: Secret Scanning
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  security-headers:
    runs-on: ubuntu-latest
    name: Security Headers Check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        continue-on-error: true

      - name: Check for security headers
        run: |
          echo "Checking for security-related configurations..."

          # Check for security headers in Next.js config
          if grep -r "X-Content-Type-Options\|X-Frame-Options\|X-XSS-Protection\|Strict-Transport-Security" next.config.js; then
            echo "✅ Security headers found in Next.js config"
          else
            echo "⚠️ Security headers not found - consider adding them"
          fi

          # Check for CSP configuration
          if grep -r "Content-Security-Policy" .; then
            echo "✅ Content Security Policy configuration found"
          else
            echo "⚠️ Content Security Policy not configured"
          fi

  oauth-security-check:
    runs-on: ubuntu-latest
    name: OAuth Configuration Check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check OAuth scopes
        run: |
          echo "Checking OAuth scope configuration..."

          # Check that minimal scopes are being requested
          if grep -r "read:user.*user:email.*public_repo" src/; then
            echo "✅ Minimal OAuth scopes configured"
          else
            echo "⚠️ OAuth scopes may be too broad - review permissions"
            exit 1
          fi

          # Check for GitHub OAuth provider configuration
          if grep -r "GitHubProvider" src/; then
            echo "✅ GitHub OAuth provider configured"
          else
            echo "❌ GitHub OAuth provider not found"
            exit 1
          fi

  webhook-security-check:
    runs-on: ubuntu-latest
    name: Webhook Security Check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check webhook signature verification
        run: |
          echo "Checking webhook security implementation..."

          # Check for webhook signature verification
          if grep -r "verifyWebhookSignature\|x-hub-signature" src/; then
            echo "✅ Webhook signature verification implemented"
          else
            echo "⚠️ Webhook signature verification not found"
          fi

          # Check for GITHUB_WEBHOOK_SECRET usage
          if grep -r "GITHUB_WEBHOOK_SECRET" src/; then
            echo "✅ Webhook secret configuration found"
          else
            echo "⚠️ Webhook secret configuration not found"
          fi

  repository-security-check:
    runs-on: ubuntu-latest
    name: Repository Security Check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check repository access controls
        run: |
          echo "Checking repository access control implementation..."

          # Check for user repository access verification
          if grep -r "verifyUserRepositoryAccess\|checkRepositoryOwnership" src/; then
            echo "✅ Repository access verification implemented"
          else
            echo "⚠️ Repository access verification not found"
            exit 1
          fi

          # Check for collaborator verification
          if grep -r "verifyMainRepoCollaboratorAccess\|checkCollaborator" src/; then
            echo "✅ Collaborator verification implemented"
          else
            echo "⚠️ Collaborator verification not found"
            exit 1
          fi

  environment-security:
    runs-on: ubuntu-latest
    name: Environment Security Check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check environment variable usage
        run: |
          echo "Checking environment variable security..."

          # Check for proper environment variable usage
          if grep -r "process\.env\." src/ | grep -v "NODE_ENV\|GITHUB_CLIENT_ID"; then
            echo "Environment variables found - ensure they are properly secured"
          fi

          # Check for hardcoded secrets (basic check)
          if grep -ri "secret.*=.*['\"][a-z0-9]\{10,\}['\"]" src/; then
            echo "❌ Possible hardcoded secrets found"
            exit 1
          else
            echo "✅ No obvious hardcoded secrets found"
          fi

  summary:
    runs-on: ubuntu-latest
    name: Security Check Summary
    needs:
      [
        dependency-scan,
        codeql-analysis,
        secret-scan,
        oauth-security-check,
        webhook-security-check,
        repository-security-check,
      ]
    if: always()
    steps:
      - name: Security Summary
        run: |
            echo "## GitSocial Security Check Summary"
            echo ""
            echo "### Completed Checks:"
              echo "- Dependency vulnerability scanning"
              echo "- CodeQL security analysis"  
              echo "- Secret scanning"
              echo "- OAuth configuration validation"
              echo "- Webhook security verification"
              echo "- Repository access control validation"
            echo ""
            echo "### Security Features Verified:"
              echo "- Minimal OAuth scopes (read:user, user:email, public_repo)"
              echo "- Webhook signature verification"
              echo "- Repository access controls"
              echo "- Collaborator permission verification"
              echo "- Dependency vulnerability monitoring"
            echo ""
              echo "GitSocial security checks completed successfully!"
